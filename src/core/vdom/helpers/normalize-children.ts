/**
 * simpleNormalizeChildren、normalizeChildren用于规范化render函数执行过程中(createElement)的子节点
 * 返回规范后格式的子节点:一维节点数组,且合并了相邻的文本节点
 */


import VNode, { createTextVNode } from 'core/vdom/vnode'
import {
  isFalse,
  isTrue,
  isArray,
  isDef,
  isUndef,
  isPrimitive
} from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// 此处为扁平化处理，将children处理为一维数组
// 注意apply的调用很精妙
export function simpleNormalizeChildren(children: any) {
  for (let i = 0; i < children.length; i++) {
    if (isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
// 如果children为原始类型(string、number、boolean、symbol)，则直接创建为单个文本节点的数组
// 如果children为数组，则将其处理为一维的节点数组
export function normalizeChildren(children: any): Array<VNode> | undefined {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : isArray(children)
    ? normalizeArrayChildren(children)
    : undefined
}

function isTextNode(node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

// 对children为数组的情况作处理，返回一个一维节点数组
function normalizeArrayChildren(
  children: any,
  nestedIndex?: string
): Array<VNode> {
  const res: VNode[] = []
  // c表示单个child，i为索引index
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    //  nested
    // 单个child为数组
    if (isArray(c)) {
      if (c.length > 0) {
        // 嵌套调用normalizeArrayChildren处理单个child
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 合并相邻的文本节点并且推入res节点数组中
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text)
          c.shift()
        }
        res.push.apply(res, c)
      }
    }
    // 单个child为原始类型 (string、number、boolean、symbol)
    else if (isPrimitive(c)) {
      // 如果上一个节点是文本节点，合并相邻文本节点
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c)
      } 
      // 其他情况创建文本节点推入
      else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    } 
    // 其他情况(单个child本就是节点类型，不需要额外处理)
    else {
      // 单个child为文本节点且上一个节点也是文本节点，直接合并
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text)
      } 
      // 直接推入结果数组
      else {
        // default key for nested array children (likely generated by v-for)
        // 处理单个child的key值
        if (
          isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)
        ) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
